// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>
#include <string_view>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
#include <error/error.h>
namespace i8n {
    enum class Message {
        embed_file_error_occrued = 0,
        embed_file_data_size_missmatch = 1,
        embed_file_file_not_found = 2,
        expr_unary_empty_stack = 3,
        expr_unary_null = 4,
        expr_unary_invalid_type = 5,
        expr_div_by_zero = 6,
        expr_binary_invalid_numbers = 7,
        expr_binary_invalid_strings = 8,
        expr_binary_invalid_bytes = 9,
        expr_binary_invalid_boolean = 10,
        expr_short_circuit_empty_stack = 11,
        expr_short_circuit_need_boolean = 12,
        expr_binary_empty_stack = 13,
        expr_binary_null_both = 14,
        expr_binary_null_left_or_right = 15,
        expr_binary_invalid_type = 16,
        expr_array_literal_empty_stack = 17,
        expr_object_literal_empty_stack = 18,
        expr_dot_empty_stack = 19,
        expr_dot_invalid_type = 20,
        expr_index_empty_stack = 21,
        expr_index_index_is_not_number = 22,
        expr_index_invalid_type = 23,
        expr_assign_empty_stack = 24,
        expr_assign_invalid_type = 25,
        expr_call_empty_stack = 26,
        expr_call_non_function = 27,
        load_library_failed = 28,
        load_library_not_loaded = 29,
        load_library_not_loaded_bug = 30,
        load_library_function_not_found = 31,
        builtin_typeof_invalid_type = 32,
        builtin_to_string_cannot_convert_object_value = 33,
        builtin_to_string_cannot_convert_array_element = 34,
        builtin_to_string_invalid_type = 35,
        builtin_parse_int_non_string = 36,
        builtin_cannot_call_builtin = 37,
        builtin_invalid_special_object_access = 38,
        builtin_to_string_invalid_argument_count = 39,
        builtin_parse_int_invalid_argument_count = 40,
        builtin_parse_uint_invalid_argument_count = 41,
        builtin_trim_invalid_argument_count = 42,
        builtin_trim_non_string = 43,
        builtin_split_invalid_argument_count = 44,
        builtin_split_non_string = 45,
        builtin_split_empty_delimiter = 46,
        builtin_eval_invalid_argument_count = 47,
        builtin_eval_non_string = 48,
        builtin_load_foreign_invalid_argument_count = 49,
        builtin_load_foreign_non_string = 50,
        builtin_unload_foreign_invalid_argument_count = 51,
        builtin_unload_foreign_non_foreign_object = 52,
        builtin_unload_foreign_non_library_object = 53,
        builtin_unload_foreign_liblary_not_loaded = 54,
        builtin_call_foreign_invalid_argument_count = 55,
        builtin_call_foreign_non_foreign_object = 56,
        builtin_call_foreign_non_library_object = 57,
        builtin_call_foreign_non_string_function_name = 58,
        builtin_call_foreign_non_array_arguments = 59,
        builtin_typeof_invalid_argument_count = 60,
        builtin_from_utf8_invalid_argument_count = 61,
        builtin_from_utf8_non_bytes = 62,
        builtin_from_utf8_invalid_utf8 = 63,
        builtin_to_utf8_invalid_argument_count = 64,
        builtin_to_utf8_invalid_utf32 = 65,
        builtin_to_utf8_non_string = 66,
        special_object_unknown = 67,
        expr_object_has_no_property = 68,
        expr_dot_to_non_object = 69,
        expr_index_out_of_range = 70,
        expr_index_to_non_array = 71,
        expr_invalid_access_bug = 72,
        expr_invalid_assign = 73,
        expr_assigning_undefined_property_or_index = 74,
        save_data_player_is_max_255 = 75,
        save_data_player_name_should_be_1_to_10_chars = 76,
        save_global_variable_no_key = 77,
        expr_unknown_assign = 78,
        expr_variable_not_found = 79,
        expr_invalid_access_object = 80,
        expr_invalid_access_array = 81,
        expr_unknown_access = 82,
        script_error = 83,
        expr_needs_boolean = 84,
        command_while_or_if_is_not_opened = 85,
        command_while_or_if_is_not_closed = 86,
        command_block_is_not_closed = 87,
        expr_failed_to_evaluate = 88,
        command_call_stack_is_empty = 89,
        builtin_eval_call_stack_is_empty_bug = 90,
        builtin_eval_call_stack_is_invalid_bug = 91,
        builtin_eval_foreign_call_stack_is_invalid_bug = 92,
        command_few_arguments = 93,
        command_specify_number = 94,
        command_unknown_layout = 95,
        command_elif_out_of_if_block = 96,
        expr_failed_to_parse = 97,
        expr_expr_is_not_specified_bug = 98,
        expr_stack_is_not_correct_bug = 99,
        command_assertion_failed = 100,
        command_else_out_of_if_block = 101,
        command_block_is_not_opened = 102,
        command_function_invalid_name = 103,
        command_foreign_callback_not_registered_bug = 104,
        command_commands_after_foreign_callback_bug = 105,
        command_foreign_callback_stack_is_empty_bug = 106,
        command_failed_to_execute_foreign_callback = 107,
        command_failed_to_execute_foreign_callback_bug = 108,
        command_unknown = 109,
        save_data_encode_failed = 110,
        save_data_file_create_failed = 111,
        save_data_file_write_failed = 112,
        command_include_recursive_reference = 113,
        script_interrupted_and_end_game = 114,
        script_end_game = 115,
        script_failed_to_parse_config_json = 116,
        script_failed_to_convert_config_json = 117,
        title_main_menu = 118,
        menu_input_save_data_name = 119,
        menu_failed_to_create_save_data = 120,
        menu_save_data_created = 121,
        menu_save_data_not_found = 122,
        menu_select_save_data = 123,
        menu_next = 124,
        menu_back = 125,
        menu_cancel = 126,
        menu_do_you_delete_save_data = 127,
        menu_save_data_deleted = 128,
        menu_failed_to_delete_save_data = 129,
        menu_start_game = 130,
        menu_error_occurred = 131,
        menu_reloading = 132,
    };
    constexpr const char* to_string(Message e) {
        switch (e) {
            case Message::embed_file_error_occrued:
                return "embed_file_error_occrued";
            case Message::embed_file_data_size_missmatch:
                return "embed_file_data_size_missmatch";
            case Message::embed_file_file_not_found:
                return "embed_file_file_not_found";
            case Message::expr_unary_empty_stack:
                return "expr_unary_empty_stack";
            case Message::expr_unary_null:
                return "expr_unary_null";
            case Message::expr_unary_invalid_type:
                return "expr_unary_invalid_type";
            case Message::expr_div_by_zero:
                return "expr_div_by_zero";
            case Message::expr_binary_invalid_numbers:
                return "expr_binary_invalid_numbers";
            case Message::expr_binary_invalid_strings:
                return "expr_binary_invalid_strings";
            case Message::expr_binary_invalid_bytes:
                return "expr_binary_invalid_bytes";
            case Message::expr_binary_invalid_boolean:
                return "expr_binary_invalid_boolean";
            case Message::expr_short_circuit_empty_stack:
                return "expr_short_circuit_empty_stack";
            case Message::expr_short_circuit_need_boolean:
                return "expr_short_circuit_need_boolean";
            case Message::expr_binary_empty_stack:
                return "expr_binary_empty_stack";
            case Message::expr_binary_null_both:
                return "expr_binary_null_both";
            case Message::expr_binary_null_left_or_right:
                return "expr_binary_null_left_or_right";
            case Message::expr_binary_invalid_type:
                return "expr_binary_invalid_type";
            case Message::expr_array_literal_empty_stack:
                return "expr_array_literal_empty_stack";
            case Message::expr_object_literal_empty_stack:
                return "expr_object_literal_empty_stack";
            case Message::expr_dot_empty_stack:
                return "expr_dot_empty_stack";
            case Message::expr_dot_invalid_type:
                return "expr_dot_invalid_type";
            case Message::expr_index_empty_stack:
                return "expr_index_empty_stack";
            case Message::expr_index_index_is_not_number:
                return "expr_index_index_is_not_number";
            case Message::expr_index_invalid_type:
                return "expr_index_invalid_type";
            case Message::expr_assign_empty_stack:
                return "expr_assign_empty_stack";
            case Message::expr_assign_invalid_type:
                return "expr_assign_invalid_type";
            case Message::expr_call_empty_stack:
                return "expr_call_empty_stack";
            case Message::expr_call_non_function:
                return "expr_call_non_function";
            case Message::load_library_failed:
                return "load_library_failed";
            case Message::load_library_not_loaded:
                return "load_library_not_loaded";
            case Message::load_library_not_loaded_bug:
                return "load_library_not_loaded_bug";
            case Message::load_library_function_not_found:
                return "load_library_function_not_found";
            case Message::builtin_typeof_invalid_type:
                return "builtin_typeof_invalid_type";
            case Message::builtin_to_string_cannot_convert_object_value:
                return "builtin_to_string_cannot_convert_object_value";
            case Message::builtin_to_string_cannot_convert_array_element:
                return "builtin_to_string_cannot_convert_array_element";
            case Message::builtin_to_string_invalid_type:
                return "builtin_to_string_invalid_type";
            case Message::builtin_parse_int_non_string:
                return "builtin_parse_int_non_string";
            case Message::builtin_cannot_call_builtin:
                return "builtin_cannot_call_builtin";
            case Message::builtin_invalid_special_object_access:
                return "builtin_invalid_special_object_access";
            case Message::builtin_to_string_invalid_argument_count:
                return "builtin_to_string_invalid_argument_count";
            case Message::builtin_parse_int_invalid_argument_count:
                return "builtin_parse_int_invalid_argument_count";
            case Message::builtin_parse_uint_invalid_argument_count:
                return "builtin_parse_uint_invalid_argument_count";
            case Message::builtin_trim_invalid_argument_count:
                return "builtin_trim_invalid_argument_count";
            case Message::builtin_trim_non_string:
                return "builtin_trim_non_string";
            case Message::builtin_split_invalid_argument_count:
                return "builtin_split_invalid_argument_count";
            case Message::builtin_split_non_string:
                return "builtin_split_non_string";
            case Message::builtin_split_empty_delimiter:
                return "builtin_split_empty_delimiter";
            case Message::builtin_eval_invalid_argument_count:
                return "builtin_eval_invalid_argument_count";
            case Message::builtin_eval_non_string:
                return "builtin_eval_non_string";
            case Message::builtin_load_foreign_invalid_argument_count:
                return "builtin_load_foreign_invalid_argument_count";
            case Message::builtin_load_foreign_non_string:
                return "builtin_load_foreign_non_string";
            case Message::builtin_unload_foreign_invalid_argument_count:
                return "builtin_unload_foreign_invalid_argument_count";
            case Message::builtin_unload_foreign_non_foreign_object:
                return "builtin_unload_foreign_non_foreign_object";
            case Message::builtin_unload_foreign_non_library_object:
                return "builtin_unload_foreign_non_library_object";
            case Message::builtin_unload_foreign_liblary_not_loaded:
                return "builtin_unload_foreign_liblary_not_loaded";
            case Message::builtin_call_foreign_invalid_argument_count:
                return "builtin_call_foreign_invalid_argument_count";
            case Message::builtin_call_foreign_non_foreign_object:
                return "builtin_call_foreign_non_foreign_object";
            case Message::builtin_call_foreign_non_library_object:
                return "builtin_call_foreign_non_library_object";
            case Message::builtin_call_foreign_non_string_function_name:
                return "builtin_call_foreign_non_string_function_name";
            case Message::builtin_call_foreign_non_array_arguments:
                return "builtin_call_foreign_non_array_arguments";
            case Message::builtin_typeof_invalid_argument_count:
                return "builtin_typeof_invalid_argument_count";
            case Message::builtin_from_utf8_invalid_argument_count:
                return "builtin_from_utf8_invalid_argument_count";
            case Message::builtin_from_utf8_non_bytes:
                return "builtin_from_utf8_non_bytes";
            case Message::builtin_from_utf8_invalid_utf8:
                return "builtin_from_utf8_invalid_utf8";
            case Message::builtin_to_utf8_invalid_argument_count:
                return "builtin_to_utf8_invalid_argument_count";
            case Message::builtin_to_utf8_invalid_utf32:
                return "builtin_to_utf8_invalid_utf32";
            case Message::builtin_to_utf8_non_string:
                return "builtin_to_utf8_non_string";
            case Message::special_object_unknown:
                return "special_object_unknown";
            case Message::expr_object_has_no_property:
                return "expr_object_has_no_property";
            case Message::expr_dot_to_non_object:
                return "expr_dot_to_non_object";
            case Message::expr_index_out_of_range:
                return "expr_index_out_of_range";
            case Message::expr_index_to_non_array:
                return "expr_index_to_non_array";
            case Message::expr_invalid_access_bug:
                return "expr_invalid_access_bug";
            case Message::expr_invalid_assign:
                return "expr_invalid_assign";
            case Message::expr_assigning_undefined_property_or_index:
                return "expr_assigning_undefined_property_or_index";
            case Message::save_data_player_is_max_255:
                return "save_data_player_is_max_255";
            case Message::save_data_player_name_should_be_1_to_10_chars:
                return "save_data_player_name_should_be_1_to_10_chars";
            case Message::save_global_variable_no_key:
                return "save_global_variable_no_key";
            case Message::expr_unknown_assign:
                return "expr_unknown_assign";
            case Message::expr_variable_not_found:
                return "expr_variable_not_found";
            case Message::expr_invalid_access_object:
                return "expr_invalid_access_object";
            case Message::expr_invalid_access_array:
                return "expr_invalid_access_array";
            case Message::expr_unknown_access:
                return "expr_unknown_access";
            case Message::script_error:
                return "script_error";
            case Message::expr_needs_boolean:
                return "expr_needs_boolean";
            case Message::command_while_or_if_is_not_opened:
                return "command_while_or_if_is_not_opened";
            case Message::command_while_or_if_is_not_closed:
                return "command_while_or_if_is_not_closed";
            case Message::command_block_is_not_closed:
                return "command_block_is_not_closed";
            case Message::expr_failed_to_evaluate:
                return "expr_failed_to_evaluate";
            case Message::command_call_stack_is_empty:
                return "command_call_stack_is_empty";
            case Message::builtin_eval_call_stack_is_empty_bug:
                return "builtin_eval_call_stack_is_empty_bug";
            case Message::builtin_eval_call_stack_is_invalid_bug:
                return "builtin_eval_call_stack_is_invalid_bug";
            case Message::builtin_eval_foreign_call_stack_is_invalid_bug:
                return "builtin_eval_foreign_call_stack_is_invalid_bug";
            case Message::command_few_arguments:
                return "command_few_arguments";
            case Message::command_specify_number:
                return "command_specify_number";
            case Message::command_unknown_layout:
                return "command_unknown_layout";
            case Message::command_elif_out_of_if_block:
                return "command_elif_out_of_if_block";
            case Message::expr_failed_to_parse:
                return "expr_failed_to_parse";
            case Message::expr_expr_is_not_specified_bug:
                return "expr_expr_is_not_specified_bug";
            case Message::expr_stack_is_not_correct_bug:
                return "expr_stack_is_not_correct_bug";
            case Message::command_assertion_failed:
                return "command_assertion_failed";
            case Message::command_else_out_of_if_block:
                return "command_else_out_of_if_block";
            case Message::command_block_is_not_opened:
                return "command_block_is_not_opened";
            case Message::command_function_invalid_name:
                return "command_function_invalid_name";
            case Message::command_foreign_callback_not_registered_bug:
                return "command_foreign_callback_not_registered_bug";
            case Message::command_commands_after_foreign_callback_bug:
                return "command_commands_after_foreign_callback_bug";
            case Message::command_foreign_callback_stack_is_empty_bug:
                return "command_foreign_callback_stack_is_empty_bug";
            case Message::command_failed_to_execute_foreign_callback:
                return "command_failed_to_execute_foreign_callback";
            case Message::command_failed_to_execute_foreign_callback_bug:
                return "command_failed_to_execute_foreign_callback_bug";
            case Message::command_unknown:
                return "command_unknown";
            case Message::save_data_encode_failed:
                return "save_data_encode_failed";
            case Message::save_data_file_create_failed:
                return "save_data_file_create_failed";
            case Message::save_data_file_write_failed:
                return "save_data_file_write_failed";
            case Message::command_include_recursive_reference:
                return "command_include_recursive_reference";
            case Message::script_interrupted_and_end_game:
                return "script_interrupted_and_end_game";
            case Message::script_end_game:
                return "script_end_game";
            case Message::script_failed_to_parse_config_json:
                return "script_failed_to_parse_config_json";
            case Message::script_failed_to_convert_config_json:
                return "script_failed_to_convert_config_json";
            case Message::title_main_menu:
                return "title_main_menu";
            case Message::menu_input_save_data_name:
                return "menu_input_save_data_name";
            case Message::menu_failed_to_create_save_data:
                return "menu_failed_to_create_save_data";
            case Message::menu_save_data_created:
                return "menu_save_data_created";
            case Message::menu_save_data_not_found:
                return "menu_save_data_not_found";
            case Message::menu_select_save_data:
                return "menu_select_save_data";
            case Message::menu_next:
                return "menu_next";
            case Message::menu_back:
                return "menu_back";
            case Message::menu_cancel:
                return "menu_cancel";
            case Message::menu_do_you_delete_save_data:
                return "menu_do_you_delete_save_data";
            case Message::menu_save_data_deleted:
                return "menu_save_data_deleted";
            case Message::menu_failed_to_delete_save_data:
                return "menu_failed_to_delete_save_data";
            case Message::menu_start_game:
                return "menu_start_game";
            case Message::menu_error_occurred:
                return "menu_error_occurred";
            case Message::menu_reloading:
                return "menu_reloading";
        }
        return "";
    }

    constexpr std::optional<Message> Message_from_string(std::string_view str) {
        if (str.empty()) {
            return std::nullopt;
        }
        if (str == "embed_file_error_occrued") {
            return Message::embed_file_error_occrued;
        }
        if (str == "embed_file_data_size_missmatch") {
            return Message::embed_file_data_size_missmatch;
        }
        if (str == "embed_file_file_not_found") {
            return Message::embed_file_file_not_found;
        }
        if (str == "expr_unary_empty_stack") {
            return Message::expr_unary_empty_stack;
        }
        if (str == "expr_unary_null") {
            return Message::expr_unary_null;
        }
        if (str == "expr_unary_invalid_type") {
            return Message::expr_unary_invalid_type;
        }
        if (str == "expr_div_by_zero") {
            return Message::expr_div_by_zero;
        }
        if (str == "expr_binary_invalid_numbers") {
            return Message::expr_binary_invalid_numbers;
        }
        if (str == "expr_binary_invalid_strings") {
            return Message::expr_binary_invalid_strings;
        }
        if (str == "expr_binary_invalid_bytes") {
            return Message::expr_binary_invalid_bytes;
        }
        if (str == "expr_binary_invalid_boolean") {
            return Message::expr_binary_invalid_boolean;
        }
        if (str == "expr_short_circuit_empty_stack") {
            return Message::expr_short_circuit_empty_stack;
        }
        if (str == "expr_short_circuit_need_boolean") {
            return Message::expr_short_circuit_need_boolean;
        }
        if (str == "expr_binary_empty_stack") {
            return Message::expr_binary_empty_stack;
        }
        if (str == "expr_binary_null_both") {
            return Message::expr_binary_null_both;
        }
        if (str == "expr_binary_null_left_or_right") {
            return Message::expr_binary_null_left_or_right;
        }
        if (str == "expr_binary_invalid_type") {
            return Message::expr_binary_invalid_type;
        }
        if (str == "expr_array_literal_empty_stack") {
            return Message::expr_array_literal_empty_stack;
        }
        if (str == "expr_object_literal_empty_stack") {
            return Message::expr_object_literal_empty_stack;
        }
        if (str == "expr_dot_empty_stack") {
            return Message::expr_dot_empty_stack;
        }
        if (str == "expr_dot_invalid_type") {
            return Message::expr_dot_invalid_type;
        }
        if (str == "expr_index_empty_stack") {
            return Message::expr_index_empty_stack;
        }
        if (str == "expr_index_index_is_not_number") {
            return Message::expr_index_index_is_not_number;
        }
        if (str == "expr_index_invalid_type") {
            return Message::expr_index_invalid_type;
        }
        if (str == "expr_assign_empty_stack") {
            return Message::expr_assign_empty_stack;
        }
        if (str == "expr_assign_invalid_type") {
            return Message::expr_assign_invalid_type;
        }
        if (str == "expr_call_empty_stack") {
            return Message::expr_call_empty_stack;
        }
        if (str == "expr_call_non_function") {
            return Message::expr_call_non_function;
        }
        if (str == "load_library_failed") {
            return Message::load_library_failed;
        }
        if (str == "load_library_not_loaded") {
            return Message::load_library_not_loaded;
        }
        if (str == "load_library_not_loaded_bug") {
            return Message::load_library_not_loaded_bug;
        }
        if (str == "load_library_function_not_found") {
            return Message::load_library_function_not_found;
        }
        if (str == "builtin_typeof_invalid_type") {
            return Message::builtin_typeof_invalid_type;
        }
        if (str == "builtin_to_string_cannot_convert_object_value") {
            return Message::builtin_to_string_cannot_convert_object_value;
        }
        if (str == "builtin_to_string_cannot_convert_array_element") {
            return Message::builtin_to_string_cannot_convert_array_element;
        }
        if (str == "builtin_to_string_invalid_type") {
            return Message::builtin_to_string_invalid_type;
        }
        if (str == "builtin_parse_int_non_string") {
            return Message::builtin_parse_int_non_string;
        }
        if (str == "builtin_cannot_call_builtin") {
            return Message::builtin_cannot_call_builtin;
        }
        if (str == "builtin_invalid_special_object_access") {
            return Message::builtin_invalid_special_object_access;
        }
        if (str == "builtin_to_string_invalid_argument_count") {
            return Message::builtin_to_string_invalid_argument_count;
        }
        if (str == "builtin_parse_int_invalid_argument_count") {
            return Message::builtin_parse_int_invalid_argument_count;
        }
        if (str == "builtin_parse_uint_invalid_argument_count") {
            return Message::builtin_parse_uint_invalid_argument_count;
        }
        if (str == "builtin_trim_invalid_argument_count") {
            return Message::builtin_trim_invalid_argument_count;
        }
        if (str == "builtin_trim_non_string") {
            return Message::builtin_trim_non_string;
        }
        if (str == "builtin_split_invalid_argument_count") {
            return Message::builtin_split_invalid_argument_count;
        }
        if (str == "builtin_split_non_string") {
            return Message::builtin_split_non_string;
        }
        if (str == "builtin_split_empty_delimiter") {
            return Message::builtin_split_empty_delimiter;
        }
        if (str == "builtin_eval_invalid_argument_count") {
            return Message::builtin_eval_invalid_argument_count;
        }
        if (str == "builtin_eval_non_string") {
            return Message::builtin_eval_non_string;
        }
        if (str == "builtin_load_foreign_invalid_argument_count") {
            return Message::builtin_load_foreign_invalid_argument_count;
        }
        if (str == "builtin_load_foreign_non_string") {
            return Message::builtin_load_foreign_non_string;
        }
        if (str == "builtin_unload_foreign_invalid_argument_count") {
            return Message::builtin_unload_foreign_invalid_argument_count;
        }
        if (str == "builtin_unload_foreign_non_foreign_object") {
            return Message::builtin_unload_foreign_non_foreign_object;
        }
        if (str == "builtin_unload_foreign_non_library_object") {
            return Message::builtin_unload_foreign_non_library_object;
        }
        if (str == "builtin_unload_foreign_liblary_not_loaded") {
            return Message::builtin_unload_foreign_liblary_not_loaded;
        }
        if (str == "builtin_call_foreign_invalid_argument_count") {
            return Message::builtin_call_foreign_invalid_argument_count;
        }
        if (str == "builtin_call_foreign_non_foreign_object") {
            return Message::builtin_call_foreign_non_foreign_object;
        }
        if (str == "builtin_call_foreign_non_library_object") {
            return Message::builtin_call_foreign_non_library_object;
        }
        if (str == "builtin_call_foreign_non_string_function_name") {
            return Message::builtin_call_foreign_non_string_function_name;
        }
        if (str == "builtin_call_foreign_non_array_arguments") {
            return Message::builtin_call_foreign_non_array_arguments;
        }
        if (str == "builtin_typeof_invalid_argument_count") {
            return Message::builtin_typeof_invalid_argument_count;
        }
        if (str == "builtin_from_utf8_invalid_argument_count") {
            return Message::builtin_from_utf8_invalid_argument_count;
        }
        if (str == "builtin_from_utf8_non_bytes") {
            return Message::builtin_from_utf8_non_bytes;
        }
        if (str == "builtin_from_utf8_invalid_utf8") {
            return Message::builtin_from_utf8_invalid_utf8;
        }
        if (str == "builtin_to_utf8_invalid_argument_count") {
            return Message::builtin_to_utf8_invalid_argument_count;
        }
        if (str == "builtin_to_utf8_invalid_utf32") {
            return Message::builtin_to_utf8_invalid_utf32;
        }
        if (str == "builtin_to_utf8_non_string") {
            return Message::builtin_to_utf8_non_string;
        }
        if (str == "special_object_unknown") {
            return Message::special_object_unknown;
        }
        if (str == "expr_object_has_no_property") {
            return Message::expr_object_has_no_property;
        }
        if (str == "expr_dot_to_non_object") {
            return Message::expr_dot_to_non_object;
        }
        if (str == "expr_index_out_of_range") {
            return Message::expr_index_out_of_range;
        }
        if (str == "expr_index_to_non_array") {
            return Message::expr_index_to_non_array;
        }
        if (str == "expr_invalid_access_bug") {
            return Message::expr_invalid_access_bug;
        }
        if (str == "expr_invalid_assign") {
            return Message::expr_invalid_assign;
        }
        if (str == "expr_assigning_undefined_property_or_index") {
            return Message::expr_assigning_undefined_property_or_index;
        }
        if (str == "save_data_player_is_max_255") {
            return Message::save_data_player_is_max_255;
        }
        if (str == "save_data_player_name_should_be_1_to_10_chars") {
            return Message::save_data_player_name_should_be_1_to_10_chars;
        }
        if (str == "save_global_variable_no_key") {
            return Message::save_global_variable_no_key;
        }
        if (str == "expr_unknown_assign") {
            return Message::expr_unknown_assign;
        }
        if (str == "expr_variable_not_found") {
            return Message::expr_variable_not_found;
        }
        if (str == "expr_invalid_access_object") {
            return Message::expr_invalid_access_object;
        }
        if (str == "expr_invalid_access_array") {
            return Message::expr_invalid_access_array;
        }
        if (str == "expr_unknown_access") {
            return Message::expr_unknown_access;
        }
        if (str == "script_error") {
            return Message::script_error;
        }
        if (str == "expr_needs_boolean") {
            return Message::expr_needs_boolean;
        }
        if (str == "command_while_or_if_is_not_opened") {
            return Message::command_while_or_if_is_not_opened;
        }
        if (str == "command_while_or_if_is_not_closed") {
            return Message::command_while_or_if_is_not_closed;
        }
        if (str == "command_block_is_not_closed") {
            return Message::command_block_is_not_closed;
        }
        if (str == "expr_failed_to_evaluate") {
            return Message::expr_failed_to_evaluate;
        }
        if (str == "command_call_stack_is_empty") {
            return Message::command_call_stack_is_empty;
        }
        if (str == "builtin_eval_call_stack_is_empty_bug") {
            return Message::builtin_eval_call_stack_is_empty_bug;
        }
        if (str == "builtin_eval_call_stack_is_invalid_bug") {
            return Message::builtin_eval_call_stack_is_invalid_bug;
        }
        if (str == "builtin_eval_foreign_call_stack_is_invalid_bug") {
            return Message::builtin_eval_foreign_call_stack_is_invalid_bug;
        }
        if (str == "command_few_arguments") {
            return Message::command_few_arguments;
        }
        if (str == "command_specify_number") {
            return Message::command_specify_number;
        }
        if (str == "command_unknown_layout") {
            return Message::command_unknown_layout;
        }
        if (str == "command_elif_out_of_if_block") {
            return Message::command_elif_out_of_if_block;
        }
        if (str == "expr_failed_to_parse") {
            return Message::expr_failed_to_parse;
        }
        if (str == "expr_expr_is_not_specified_bug") {
            return Message::expr_expr_is_not_specified_bug;
        }
        if (str == "expr_stack_is_not_correct_bug") {
            return Message::expr_stack_is_not_correct_bug;
        }
        if (str == "command_assertion_failed") {
            return Message::command_assertion_failed;
        }
        if (str == "command_else_out_of_if_block") {
            return Message::command_else_out_of_if_block;
        }
        if (str == "command_block_is_not_opened") {
            return Message::command_block_is_not_opened;
        }
        if (str == "command_function_invalid_name") {
            return Message::command_function_invalid_name;
        }
        if (str == "command_foreign_callback_not_registered_bug") {
            return Message::command_foreign_callback_not_registered_bug;
        }
        if (str == "command_commands_after_foreign_callback_bug") {
            return Message::command_commands_after_foreign_callback_bug;
        }
        if (str == "command_foreign_callback_stack_is_empty_bug") {
            return Message::command_foreign_callback_stack_is_empty_bug;
        }
        if (str == "command_failed_to_execute_foreign_callback") {
            return Message::command_failed_to_execute_foreign_callback;
        }
        if (str == "command_failed_to_execute_foreign_callback_bug") {
            return Message::command_failed_to_execute_foreign_callback_bug;
        }
        if (str == "command_unknown") {
            return Message::command_unknown;
        }
        if (str == "save_data_encode_failed") {
            return Message::save_data_encode_failed;
        }
        if (str == "save_data_file_create_failed") {
            return Message::save_data_file_create_failed;
        }
        if (str == "save_data_file_write_failed") {
            return Message::save_data_file_write_failed;
        }
        if (str == "command_include_recursive_reference") {
            return Message::command_include_recursive_reference;
        }
        if (str == "script_interrupted_and_end_game") {
            return Message::script_interrupted_and_end_game;
        }
        if (str == "script_end_game") {
            return Message::script_end_game;
        }
        if (str == "script_failed_to_parse_config_json") {
            return Message::script_failed_to_parse_config_json;
        }
        if (str == "script_failed_to_convert_config_json") {
            return Message::script_failed_to_convert_config_json;
        }
        if (str == "title_main_menu") {
            return Message::title_main_menu;
        }
        if (str == "menu_input_save_data_name") {
            return Message::menu_input_save_data_name;
        }
        if (str == "menu_failed_to_create_save_data") {
            return Message::menu_failed_to_create_save_data;
        }
        if (str == "menu_save_data_created") {
            return Message::menu_save_data_created;
        }
        if (str == "menu_save_data_not_found") {
            return Message::menu_save_data_not_found;
        }
        if (str == "menu_select_save_data") {
            return Message::menu_select_save_data;
        }
        if (str == "menu_next") {
            return Message::menu_next;
        }
        if (str == "menu_back") {
            return Message::menu_back;
        }
        if (str == "menu_cancel") {
            return Message::menu_cancel;
        }
        if (str == "menu_do_you_delete_save_data") {
            return Message::menu_do_you_delete_save_data;
        }
        if (str == "menu_save_data_deleted") {
            return Message::menu_save_data_deleted;
        }
        if (str == "menu_failed_to_delete_save_data") {
            return Message::menu_failed_to_delete_save_data;
        }
        if (str == "menu_start_game") {
            return Message::menu_start_game;
        }
        if (str == "menu_error_occurred") {
            return Message::menu_error_occurred;
        }
        if (str == "menu_reloading") {
            return Message::menu_reloading;
        }
        return std::nullopt;
    }
}  // namespace i8n
