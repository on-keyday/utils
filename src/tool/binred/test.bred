#    utils - utility library
#    Copyright (c) 2021-2022 on-keyday (https://github.com/on-keyday)
#    Released under the MIT license
#    https://opensource.org/licenses/mit-license.php
# generate code
# tool\binred -i src/tool/binred/test.bred -o generated/binred.h -S std::shared_ptr std::make_shared -I "<memory>"
package utils

import <cstdint>
import <string>

struct ID , int {
    A int = 0
    B int ^ A == 0x20 = 0
    C int ? C & 0x20 @ 3 ! 2 = 0
}

struct Foo {
    foo std::uint8_t = 0xff
}

struct Void{

}

struct H2Frame {
    len int $ 3
    type std::uint8_t
    flag std::uint8_t
    id std::int32_t ? id >= 0
}

struct Priority {
    depend std::uint32_t = 0 
    wight std::uint8_t = 0
}

struct DataFrame - H2Frame ^ type == 0 {
    padding std::uint8_t ^ flag & 0x8 = 0 
    data std::string $ len - padding
    pad std::string $ padding
}

struct HeaderFrame - H2Frame ^ type == 1 {
    padding std::uint8_t ^ flag & 0x8 = 0
    priority Priority ^ flag & 0x20
    data std::string $ len - padding 
    pad std::string $ padding
}

struct PriorityFrame - H2Frame ^ type == 2 ? len == 5 {
    priority Priority
}

struct RstStreamFrame - H2Frame ^ type == 3 ? len == 4 {
    code std::uint32_t
}

struct SetingsFrame - H2Frame ^ type == 4 ? len % 6 == 0 {
    setting std::string $ len ^ flag & 0x1
}

struct PushPromiseFrame - H2Frame ^ type == 5 {
    padding std::uint8_t ^ flag & 0x8 = 0
    promise std::int32_t ? promise > 0
    data std::string $ len - padding
    pad std::string $ padding 
}

struct PingFrame - H2Frame ^ type == 6 ? len == 8 ? id == 0 {
    opeque std::uint64_t
}

struct GoAwayFrame - H2Frame ^ type == 7 {
    processed std::int32_t ? id >= 0
    code std::uint32_t
    data std::string $ len - 8
}

struct WindowUpdateFrame - H2Frame ^ type == 8 ? len == 4 ? id > 0 {
    increment std::int32_t ? increment > 0
}

struct Continuation - H2Frame ^ type == 9 {
    data std::string $ len
}
