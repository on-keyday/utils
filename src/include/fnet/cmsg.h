// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
namespace futils::fnet {
    struct CMsg {
        std::uint64_t len = 0;
        std::uint32_t level = 0;
        std::uint32_t type = 0;
        ::futils::view::rvec msg;
        bool set_msg(auto&& v) {
            if (v.size() > ~std::uint64_t(0)) {
                return false;
            }
            (*this).len = v.size();
            (*this).msg = std::forward<decltype(v)>(v);
            return true;
        }
        constexpr bool encode(::futils::binary::writer& w) const;
        constexpr bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 16;
    };
    constexpr inline bool CMsg::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, static_cast<std::uint64_t>((*this).len), false)) {
            return false;
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint32_t>((*this).level), false)) {
            return false;
        }
        if (!::futils::binary::write_num(w, static_cast<std::uint32_t>((*this).type), false)) {
            return false;
        }
        auto tmp_0_ = (*this).len;
        if (tmp_0_ != (*this).msg.size()) {
            return false;
        }
        if (!w.write((*this).msg)) {
            return false;
        }
        return true;
    }
    constexpr inline bool CMsg::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, (*this).len, false)) {
            return false;
        }
        if (!::futils::binary::read_num(r, (*this).level, false)) {
            return false;
        }
        if (!::futils::binary::read_num(r, (*this).type, false)) {
            return false;
        }
        auto tmp_1_ = (*this).len;
        if (!r.read((*this).msg, tmp_1_)) {
            return false;
        }
        return true;
    }
}  // namespace futils::fnet
