/*
    futils - utility library
    Copyright (c) 2021-2024 on-keyday (https://github.com/on-keyday)
    Released under the MIT license
    https://opensource.org/licenses/mit-license.php
*/

#pragma once
#include <platform/detect.h>

namespace futils::freestd {
    namespace internal {
        template <class A, class B, bool>
        struct Select {
            using type = A;
        };

        template <class A, class B>
        struct Select<A, B, false> {
            using type = B;
        };
    }                // namespace internal
#if defined(_WIN32)  // TODO(on-keyday): what is freestanding?
    typedef unsigned __int8 uint8_t;
    typedef unsigned __int16 uint16_t;
    typedef unsigned __int32 uint32_t;
    typedef unsigned __int64 uint64_t;
    typedef __int8 int8_t;
    typedef __int16 int16_t;
    typedef __int32 int32_t;
    typedef __int64 int64_t;
    // uintptr

#else
    typedef unsigned char uint8_t;
    typedef unsigned short uint16_t;
    typedef unsigned int uint32_t;
    typedef unsigned long long uint64_t;
    typedef char int8_t;
    typedef short int16_t;
    typedef int int32_t;
    typedef long long int64_t;
    // uintptr
    using uintptr_t = futils::freestd::internal::Select<uint64_t, uint32_t, sizeof(void*) == 8>::type;
#endif

    using uintptr_t = futils::freestd::internal::Select<uint64_t, uint32_t, sizeof(void*) == 8>::type;
    using intptr_t = futils::freestd::internal::Select<int64_t, int32_t, sizeof(void*) == 8>::type;

    static_assert(sizeof(uint8_t) == 1, "uint8_t size is not 1");
    static_assert(sizeof(uint16_t) == 2, "uint16_t size is not 2");
    static_assert(sizeof(uint32_t) == 4, "uint32_t size is not 4");
    static_assert(sizeof(uint64_t) == 8, "uint64_t size is not 8");

}  // namespace futils::freestd

#ifdef FUTILS_PLATFORM_FREESTANDING
namespace std {
    using namespace futils::freestd;
}

using uint8_t = futils::freestd::uint8_t;
using uint16_t = futils::freestd::uint16_t;
using uint32_t = futils::freestd::uint32_t;
using uint64_t = futils::freestd::uint64_t;
using int8_t = futils::freestd::int8_t;
using int16_t = futils::freestd::int16_t;
using int32_t = futils::freestd::int32_t;
using int64_t = futils::freestd::int64_t;
using uintptr_t = futils::freestd::uintptr_t;
using intptr_t = futils::freestd::intptr_t;

#endif
