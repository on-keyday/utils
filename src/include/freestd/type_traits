/*
    futils - utility library
    Copyright (c) 2021-2024 on-keyday (https://github.com/on-keyday)
    Released under the MIT license
    https://opensource.org/licenses/mit-license.php
*/

#pragma once
#include <freestd/cstddef>

namespace futils::freestd {
    template <typename T, T... Ints>
    struct integer_sequence {
        using value_type = T;
        static constexpr size_t size() noexcept {
            return sizeof...(Ints);
        }
    };

    template <size_t... Ints>
    using index_sequence = integer_sequence<size_t, Ints...>;

    template <typename T, T... Ints>
    using make_integer_sequence = __make_integer_seq<integer_sequence, T, Ints...>;

    template <size_t N>
    using make_index_sequence = make_integer_sequence<size_t, N>;

    template <bool v>
    struct bool_constant {
        static constexpr bool value = v;
        using value_type = bool;
        using type = bool_constant;
        constexpr operator value_type() const noexcept {
            return value;
        }
        constexpr value_type operator()() const noexcept {
            return value;
        }
    };

    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    template <class T, class U>
    struct is_same : false_type {};

    template <class T>
    struct is_same<T, T> : true_type {};

    template <class T, class U>
    constexpr bool is_same_v = is_same<T, U>::value;

    template <class T>
    struct make_unsigned;
    template <class T>
    struct make_signed;

    template <class T>
    struct is_signed : bool_constant<T(-1) < T(0)> {};

    template <class T>
    constexpr bool is_signed_v = is_signed<T>::value;

    template <class T>
    struct is_unsigned : bool_constant<!is_signed_v<T>> {};

    template <class T>
    constexpr bool is_unsigned_v = is_unsigned<T>::value;

    template <class T>
    struct is_integral : false_type {};

#define FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(sign, unsign) \
    template <>                                           \
    struct make_unsigned<sign> {                          \
        using type = unsign;                              \
    };                                                    \
    template <>                                           \
    struct make_unsigned<unsign> {                        \
        using type = unsign;                              \
    };                                                    \
    template <>                                           \
    struct make_signed<sign> {                            \
        using type = sign;                                \
    };                                                    \
    template <>                                           \
    struct make_signed<unsign> {                          \
        using type = sign;                                \
    };                                                    \
    template <>                                           \
    struct is_integral<sign> : true_type {};              \
    template <>                                           \
    struct is_integral<unsign> : true_type {};

    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(char, unsigned char)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(short, unsigned short)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(int, unsigned int)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(long, unsigned long)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(long long, unsigned long long)
#undef FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED
    template <>
    struct is_integral<char8_t> : true_type {};
    template <>
    struct is_integral<char16_t> : true_type {};
    template <>
    struct is_integral<char32_t> : true_type {};

    template <class T>
    constexpr bool is_integral_v = is_integral<T>::value;

    template <class T>
    struct is_floating_point : false_type {};

    template <>
    struct is_floating_point<float> : true_type {};
    template <>
    struct is_floating_point<double> : true_type {};
    template <>
    struct is_floating_point<long double> : true_type {};

    template <class T>
    constexpr bool is_floating_point_v = is_floating_point<T>::value;

    template <class T>
    struct is_arithmetic : bool_constant<is_integral_v<T> ||
                                         is_floating_point_v<T>> {};

    template <class T>
    constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

    template <class T>
    using make_unsigned_t = typename make_unsigned<T>::type;
    template <class T>
    using make_signed_t = typename make_signed<T>::type;

    template <bool cond, class T = void>
    struct enable_if {};

    template <class T>
    struct enable_if<true, T> {
        using type = T;
    };

    template <bool cond, class T = void>
    using enable_if_t = typename enable_if<cond, T>::type;

    template <class T>
    struct is_pointer : false_type {};

    template <class T>
    struct is_pointer<T*> : true_type {};

    template <class T>
    constexpr bool is_pointer_v = is_pointer<T>::value;

    template <class T>
    struct is_reference : false_type {};

    template <class T>
    struct is_reference<T&> : true_type {};

    template <class T>
    struct is_reference<T&&> : true_type {};

    template <class T>
    constexpr bool is_reference_v = is_reference<T>::value;

    template <class T>
    struct is_lvalue_reference : false_type {};

    template <class T>
    struct is_lvalue_reference<T&> : true_type {};

    template <class T>
    constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template <class T>
    struct is_const : false_type {};

    template <class T>
    struct is_const<const T> : true_type {};

    template <class T>
    constexpr bool is_const_v = is_const<T>::value;

    template <class T>
    struct remove_reference {
        using type = T;
    };

    template <class T>
    struct remove_reference<T&> {
        using type = T;
    };

    template <class T>
    struct remove_reference<T&&> {
        using type = T;
    };

    template <class T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <class T>
    struct remove_cv {
        using type = T;
    };

    template <class T>
    struct remove_cv<const T> {
        using type = T;
    };

    template <class T>
    using remove_cv_t = typename remove_cv<T>::type;

    template <class T>
    struct remove_cvref {
        using type = typename remove_cv<typename remove_reference<T>::type>::type;
    };

    template <class T>
    using remove_cvref_t = typename remove_cvref<T>::type;

    template <class T>
    struct remove_pointer {
        using type = T;
    };

    template <class T>
    struct remove_pointer<T*> {
        using type = T;
    };

    template <class T>
    using remove_pointer_t = typename remove_pointer<T>::type;

    template <class T>
    struct is_empty : bool_constant<__is_empty(T)> {};

    template <class T>
    constexpr bool is_empty_v = is_empty<T>::value;

    constexpr bool is_constant_evaluated() noexcept {
        return __builtin_is_constant_evaluated();
    }

    template <class T>
    struct is_trivially_copyable : bool_constant<__is_trivially_copyable(T)> {};

    template <class T>
    constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

    template <class T>
    struct is_void : is_same<void, remove_cv_t<T>> {};

    template <class T>
    constexpr bool is_void_v = is_void<T>::value;

    template <class T>
    struct underlying_type {
        using type = __underlying_type(T);
    };

    template <class T>
    using underlying_type_t = typename underlying_type<T>::type;

}  // namespace futils::freestd

#ifdef FUTILS_PLATFORM_FREESTANDING
namespace std {
    using namespace futils::freestd;
}
#endif
