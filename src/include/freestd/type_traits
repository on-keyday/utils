/*
    futils - utility library
    Copyright (c) 2021-2024 on-keyday (https://github.com/on-keyday)
    Released under the MIT license
    https://opensource.org/licenses/mit-license.php
*/

#pragma once
#include <freestd/freestd_macro.h>
#include <freestd/cstddef>

namespace futils::freestd {
    template <typename T, T... Ints>
    struct integer_sequence {
        using value_type = T;
        static constexpr size_t size() noexcept {
            return sizeof...(Ints);
        }
    };

    template <size_t... Ints>
    using index_sequence = integer_sequence<size_t, Ints...>;

    template <typename T, T... Ints>
    using make_integer_sequence = __make_integer_seq<integer_sequence, T, Ints...>;

    template <size_t N>
    using make_index_sequence = make_integer_sequence<size_t, N>;

    template <bool v>
    struct bool_constant {
        static constexpr bool value = v;
        using value_type = bool;
        using type = bool_constant;
        constexpr operator value_type() const noexcept {
            return value;
        }
        constexpr value_type operator()() const noexcept {
            return value;
        }
    };

    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    template <class T, class U>
    struct is_same : false_type {};

    template <class T>
    struct is_same<T, T> : true_type {};

    template <class T, class U>
    constexpr bool is_same_v = is_same<T, U>::value;

    template <class T>
    struct make_unsigned;
    template <class T>
    struct make_signed;

    template <class T>
    constexpr bool is_signed_internal = T(-1) < T(0);

    template <class T>
    struct is_signed : bool_constant<is_signed_internal<T>> {};

    template <class T>
    constexpr bool is_signed_v = is_signed<T>::value;

    template <class T>
    struct is_unsigned : bool_constant<!is_signed_v<T>> {};

    template <class T>
    constexpr bool is_unsigned_v = is_unsigned<T>::value;

    template <class T>
    struct is_integral : false_type {};

#define FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(sign, unsign) \
    template <>                                           \
    struct make_unsigned<sign> {                          \
        using type = unsign;                              \
    };                                                    \
    template <>                                           \
    struct make_unsigned<unsign> {                        \
        using type = unsign;                              \
    };                                                    \
    template <>                                           \
    struct make_signed<sign> {                            \
        using type = sign;                                \
    };                                                    \
    template <>                                           \
    struct make_signed<unsign> {                          \
        using type = sign;                                \
    };                                                    \
    template <>                                           \
    struct is_integral<sign> : true_type {};              \
    template <>                                           \
    struct is_integral<unsign> : true_type {};

    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(char, unsigned char)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(short, unsigned short)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(int, unsigned int)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(long, unsigned long)
    FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED(long long, unsigned long long)
#undef FUTILS_FREESTD_MAKE_SIGNED_UNSIGNED
    template <>
    struct is_integral<char8_t> : true_type {};
    template <>
    struct is_integral<char16_t> : true_type {};
    template <>
    struct is_integral<char32_t> : true_type {};

    template <class T>
    constexpr bool is_integral_v = is_integral<T>::value;

    template <class T>
    struct is_floating_point : false_type {};

    template <>
    struct is_floating_point<float> : true_type {};
    template <>
    struct is_floating_point<double> : true_type {};
    template <>
    struct is_floating_point<long double> : true_type {};

    template <class T>
    constexpr bool is_floating_point_v = is_floating_point<T>::value;

    template <class T>
    struct is_arithmetic : bool_constant<is_integral_v<T> ||
                                         is_floating_point_v<T>> {};

    template <class T>
    constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

    template <class T>
    using make_unsigned_t = typename make_unsigned<T>::type;
    template <class T>
    using make_signed_t = typename make_signed<T>::type;

    template <bool cond, class T = void>
    struct enable_if {};

    template <class T>
    struct enable_if<true, T> {
        using type = T;
    };

    template <bool cond, class T = void>
    using enable_if_t = typename enable_if<cond, T>::type;

    template <class T>
    struct is_pointer : false_type {};

    template <class T>
    struct is_pointer<T *> : true_type {};

    template <class T>
    constexpr bool is_pointer_v = is_pointer<T>::value;

    template <class T>
    struct is_reference : false_type {};

    template <class T>
    struct is_reference<T &> : true_type {};

    template <class T>
    struct is_reference<T &&> : true_type {};

    template <class T>
    constexpr bool is_reference_v = is_reference<T>::value;

    template <class T>
    struct is_lvalue_reference : false_type {};

    template <class T>
    struct is_lvalue_reference<T &> : true_type {};

    template <class T>
    constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    template <class T>
    struct is_const : false_type {};

    template <class T>
    struct is_const<const T> : true_type {};

    template <class T>
    constexpr bool is_const_v = is_const<T>::value;

    template <class T>
    struct remove_reference {
        using type = T;
    };

    template <class T>
    struct remove_reference<T &> {
        using type = T;
    };

    template <class T>
    struct remove_reference<T &&> {
        using type = T;
    };

    template <class T>
    using remove_reference_t = typename remove_reference<T>::type;

    template <class T>
    struct remove_cv {
        using type = T;
    };

    template <class T>
    struct remove_cv<const T> {
        using type = T;
    };

    template <class T>
    using remove_cv_t = typename remove_cv<T>::type;

    template <class T>
    struct remove_cvref {
        using type = typename remove_cv<typename remove_reference<T>::type>::type;
    };

    template <class T>
    using remove_cvref_t = typename remove_cvref<T>::type;

    template <class T>
    struct remove_pointer {
        using type = T;
    };

    template <class T>
    struct remove_pointer<T *> {
        using type = T;
    };

    template <class T>
    using remove_pointer_t = typename remove_pointer<T>::type;

    template <class T>
    struct is_empty : bool_constant<__is_empty(T)> {};

    template <class T>
    constexpr bool is_empty_v = is_empty<T>::value;

    constexpr bool is_constant_evaluated() noexcept {
        return __builtin_is_constant_evaluated();
    }

    template <class T>
    struct is_trivially_copyable : bool_constant<__is_trivially_copyable(T)> {};

    template <class T>
    constexpr bool is_trivially_copyable_v = is_trivially_copyable<T>::value;

    template <class T>
    struct is_void : is_same<void, remove_cv_t<T>> {};

    template <class T>
    constexpr bool is_void_v = is_void<T>::value;

    template <class T>
    struct underlying_type {
        using type = __underlying_type(T);
    };

    template <class T>
    using underlying_type_t = typename underlying_type<T>::type;

    template <class T>
    struct is_array : false_type {};

    template <class T>
    struct is_array<T[]> : true_type {};

    template <class T, size_t N>
    struct is_array<T[N]> : true_type {};

    template <class T>
    constexpr bool is_array_v = is_array<T>::value;

    template <class T>
    struct remove_extent {
        using type = T;
    };

    template <class T>
    struct remove_extent<T[]> {
        using type = T;
    };

    template <class T, size_t N>
    struct remove_extent<T[N]> {
        using type = T;
    };

    template <class T>
    using remove_extent_t = typename remove_extent<T>::type;

    template <class T>
    constexpr bool is_function_v = !is_const_v<const T> && !is_reference_v<T>;

    template <class T>
    struct is_function : bool_constant<is_function_v<T>> {};

    template <class T>
    struct add_pointer {
        using type = remove_reference_t<T> *;
    };

    template <class T>
    using add_pointer_t = typename add_pointer<T>::type;

    template <class T>
    struct add_lvalue_reference {
        using type = T &;
    };

    template <class T>
    struct add_lvalue_reference<T &> {
        using type = T &;
    };

    template <class T>
    struct add_lvalue_reference<T &&> {
        using type = T &&;
    };

    template <class T>
    using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

    template <class T>
    struct add_rvalue_reference {
        using type = T &&;
    };

    template <class T>
    struct add_rvalue_reference<T &> {
        using type = T &;
    };

    template <class T>
    struct add_rvalue_reference<T &&> {
        using type = T &&;
    };

    template <class T>
    using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

    template <bool cond, class A, class B>
    struct conditional {
        using type = A;
    };

    template <class A, class B>
    struct conditional<false, A, B> {
        using type = B;
    };

    template <bool cond, class A, class B>
    using conditional_t = typename conditional<cond, A, B>::type;

    template <class T>
    struct decay {
        using U = remove_reference_t<T>;
        using type = conditional_t<is_array_v<U>,
                                   remove_extent_t<U> *,
                                   conditional_t<is_function_v<U>,
                                                 add_pointer_t<U>,
                                                 remove_cv_t<U>>>;
    };

    template <class T>
    using decay_t = typename decay<T>::type;

    template <class T>
    auto declval() noexcept -> add_rvalue_reference_t<T>;

    template <class T>
    struct remove_const {
        using type = T;
    };

    template <class T>
    struct remove_const<const T> {
        using type = T;
    };

    template <class T>
    using remove_const_t = typename remove_const<T>::type;

    template <class T>
    struct is_move_constructible : bool_constant<__is_constructible(T, T &&)> {};

    template <class T>
    constexpr bool is_move_constructible_v = is_move_constructible<T>::value;

    template <class T>
    struct is_constructible : bool_constant<__is_constructible(T)> {};

    template <class T>
    constexpr bool is_constructible_v = is_constructible<T>::value;

    template <class T, class U>
    struct is_convertible : bool_constant<__is_convertible(T, U)> {};

    template <class T, class U>
    constexpr bool is_convertible_v = is_convertible<T, U>::value;

    namespace internal {
        template <class F, class... A>
        concept invocable = requires(F f, A... a) {
            f(a...);
        };

    }  // namespace internal

    template <class F, class... A>
    struct invoke_result {
        // TODO(on-keyday): support std::invoke patterns
        using type = decltype(declval<F>()(declval<A>()...));
    };

    template <class F, class... A>
    using invoke_result_t = typename invoke_result<F, A...>::type;

}  // namespace futils::freestd

#ifdef FUTILS_FREESTD_STD_CPP
namespace std {
    using namespace futils::freestd;
}
#endif
