/*
    futils - utility library
    Copyright (c) 2021-2024 on-keyday (https://github.com/on-keyday)
    Released under the MIT license
    https://opensource.org/licenses/mit-license.php
*/

#pragma once
#include <freestd/freestd_macro.h>
#include <freestd/type_traits>

namespace futils::freestd {

    template <class T>
    constexpr T&& forward(typename remove_reference<T>::type& t) noexcept {
        return static_cast<T&&>(t);
    }

    template <class T>
    constexpr T&& forward(typename remove_reference<T>::type&& t) noexcept {
        static_assert(!is_lvalue_reference_v<T>);
        return static_cast<T&&>(t);
    }

    template <class T>
    constexpr typename remove_reference<T>::type&& move(T&& t) noexcept {
        return static_cast<typename remove_reference<T>::type&&>(t);
    }

    template <class T, class U>
    constexpr T exchange(T& obj, U&& new_value) {
        T old_value = move(obj);
        obj = forward<U>(new_value);
        return old_value;
    }

    template <class P1, class P2>
    struct pair {
        P1 first;
        P2 second;
    };

    template <size_t i, class T1, class T2>
    constexpr auto& get(pair<T1, T2>& p) {
        if constexpr (i == 0) {
            return p.first;
        }
        else if constexpr (i == 1) {
            return p.second;
        }
        else {
            static_assert(i < 2, "index out of range");
        }
    }

}  // namespace futils::freestd

#ifdef FUTILS_FREESTD_STD_CPP
namespace std {
    using namespace futils::freestd;
}
#endif
