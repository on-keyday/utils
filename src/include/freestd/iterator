/*
    futils - utility library
    Copyright (c) 2021-2025 on-keyday (https://github.com/on-keyday)
    Released under the MIT license
    https://opensource.org/licenses/mit-license.php
*/

#pragma once
#include <freestd/freestd_macro.h>
#include <freestd/initializer_list>
#include <freestd/cstddef>

namespace futils::freestd {
    template <class T>
    [[nodiscard]] constexpr auto data(T& t) noexcept(noexcept(t.data()))
        -> decltype(t.data()) {
        return t.data();
    }

    template <class T>
    [[nodiscard]] constexpr auto data(const T& t) noexcept(noexcept(t.data()))
        -> decltype(t.data()) {
        return t.data();
    }

    template <class T, size_t size>
    [[nodiscard]] constexpr T* data(T (&t)[size]) noexcept {
        return t;
    }

    template <class T>
    [[nodiscard]] constexpr const T* data(initializer_list<T> t) noexcept {
        return t.begin();
    }

    template <class T>
    [[nodiscard]] constexpr auto size(T& t) noexcept(noexcept(t.size()))
        -> decltype(t.size()) {
        return t.size();
    }

    template <class T>
    [[nodiscard]] constexpr auto size(const T& t) noexcept(noexcept(t.size()))
        -> decltype(t.size()) {
        return t.size();
    }

    template <class T, size_t size_>
    [[nodiscard]] constexpr auto size(T (&)[size_]) noexcept {
        return size_;
    }

    template <class T>
    [[nodiscard]] constexpr size_t size(initializer_list<T> t) noexcept {
        return t.size();
    }
}  // namespace futils::freestd

#ifdef FUTILS_FREESTD_STD_CPP
namespace std {
    using namespace futils::freestd;
}
#endif
