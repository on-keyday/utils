// Code generated by json2cpp2
#pragma once
#include <cstdint>
#include <vector>
#include <array>
#include <optional>
#include <variant>

#include <binary/flags.h>
#include <binary/float.h>
#include <view/iovec.h>
#include <binary/number.h>
namespace futils::low::rpi::rp1 {
    struct StatusRegister {
        ::futils::binary::flags_t<std::uint32_t, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 8> flags_0_;
        bits_flag_alias_method(flags_0_, 0, reserved1);
        bits_flag_alias_method(flags_0_, 1, irq_to_proc);
        bits_flag_alias_method(flags_0_, 2, irq_combined);
        bits_flag_alias_method(flags_0_, 3, event_db_level_high);
        bits_flag_alias_method(flags_0_, 4, event_db_level_low);
        bits_flag_alias_method(flags_0_, 5, event_f_edge_high);
        bits_flag_alias_method(flags_0_, 6, event_f_edge_low);
        bits_flag_alias_method(flags_0_, 7, event_level_high);
        bits_flag_alias_method(flags_0_, 8, event_level_low);
        bits_flag_alias_method(flags_0_, 9, event_edge_high);
        bits_flag_alias_method(flags_0_, 10, event_edge_low);
        bits_flag_alias_method(flags_0_, 11, into_peripheral);
        bits_flag_alias_method(flags_0_, 12, input_filtered);
        bits_flag_alias_method(flags_0_, 13, input_from_pad);
        bits_flag_alias_method(flags_0_, 14, inis_direct);
        bits_flag_alias_method(flags_0_, 15, reserved2);
        bits_flag_alias_method(flags_0_, 16, output_enable_to_pad);
        bits_flag_alias_method(flags_0_, 17, output_enable_from_peripheral);
        bits_flag_alias_method(flags_0_, 18, reserved3);
        bits_flag_alias_method(flags_0_, 19, output_to_pad);
        bits_flag_alias_method(flags_0_, 20, output_from_peripheral);
        bits_flag_alias_method(flags_0_, 21, reserved4);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
        template <typename Visitor>
        void visit(Visitor&& v) {
            v(v, "reserved1", (*this).reserved1());
            v(v, "irq_to_proc", (*this).irq_to_proc());
            v(v, "irq_combined", (*this).irq_combined());
            v(v, "event_db_level_high", (*this).event_db_level_high());
            v(v, "event_db_level_low", (*this).event_db_level_low());
            v(v, "event_f_edge_high", (*this).event_f_edge_high());
            v(v, "event_f_edge_low", (*this).event_f_edge_low());
            v(v, "event_level_high", (*this).event_level_high());
            v(v, "event_level_low", (*this).event_level_low());
            v(v, "event_edge_high", (*this).event_edge_high());
            v(v, "event_edge_low", (*this).event_edge_low());
            v(v, "into_peripheral", (*this).into_peripheral());
            v(v, "input_filtered", (*this).input_filtered());
            v(v, "input_from_pad", (*this).input_from_pad());
            v(v, "inis_direct", (*this).inis_direct());
            v(v, "reserved2", (*this).reserved2());
            v(v, "output_enable_to_pad", (*this).output_enable_to_pad());
            v(v, "output_enable_from_peripheral", (*this).output_enable_from_peripheral());
            v(v, "reserved3", (*this).reserved3());
            v(v, "output_to_pad", (*this).output_to_pad());
            v(v, "output_from_peripheral", (*this).output_from_peripheral());
            v(v, "reserved4", (*this).reserved4());
        }
    };
    inline bool StatusRegister::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_0_.as_value(), false)) {
            return false;
        }
        return true;
    }
    inline bool StatusRegister::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_0_.as_value(), false)) {
            return false;
        }
        return true;
    }
    struct ControlRegister {
        ::futils::binary::flags_t<std::uint32_t, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 7, 5> flags_1_;
        bits_flag_alias_method(flags_1_, 0, irq_over);
        bits_flag_alias_method(flags_1_, 1, reserveed1);
        bits_flag_alias_method(flags_1_, 2, irq_reset);
        bits_flag_alias_method(flags_1_, 3, irq_masK_db_level_high);
        bits_flag_alias_method(flags_1_, 4, irq_masK_db_level_low);
        bits_flag_alias_method(flags_1_, 5, irq_masK_f_edge_high);
        bits_flag_alias_method(flags_1_, 6, irq_masK_f_edge_low);
        bits_flag_alias_method(flags_1_, 7, irq_masK_level_high);
        bits_flag_alias_method(flags_1_, 8, irq_masK_level_low);
        bits_flag_alias_method(flags_1_, 9, irq_masK_edge_high);
        bits_flag_alias_method(flags_1_, 10, irq_masK_edge_low);
        bits_flag_alias_method(flags_1_, 11, reserved2);
        bits_flag_alias_method(flags_1_, 12, in_over);
        bits_flag_alias_method(flags_1_, 13, out_enable_over);
        bits_flag_alias_method(flags_1_, 14, out_over);
        bits_flag_alias_method(flags_1_, 15, f_m);
        bits_flag_alias_method(flags_1_, 16, func_sel);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
        template <typename Visitor>
        void visit(Visitor&& v) {
            v(v, "irq_over", (*this).irq_over());
            v(v, "reserveed1", (*this).reserveed1());
            v(v, "irq_reset", (*this).irq_reset());
            v(v, "irq_masK_db_level_high", (*this).irq_masK_db_level_high());
            v(v, "irq_masK_db_level_low", (*this).irq_masK_db_level_low());
            v(v, "irq_masK_f_edge_high", (*this).irq_masK_f_edge_high());
            v(v, "irq_masK_f_edge_low", (*this).irq_masK_f_edge_low());
            v(v, "irq_masK_level_high", (*this).irq_masK_level_high());
            v(v, "irq_masK_level_low", (*this).irq_masK_level_low());
            v(v, "irq_masK_edge_high", (*this).irq_masK_edge_high());
            v(v, "irq_masK_edge_low", (*this).irq_masK_edge_low());
            v(v, "reserved2", (*this).reserved2());
            v(v, "in_over", (*this).in_over());
            v(v, "out_enable_over", (*this).out_enable_over());
            v(v, "out_over", (*this).out_over());
            v(v, "f_m", (*this).f_m());
            v(v, "func_sel", (*this).func_sel());
        }
    };
    inline bool ControlRegister::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_1_.as_value(), false)) {
            return false;
        }
        return true;
    }
    inline bool ControlRegister::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_1_.as_value(), false)) {
            return false;
        }
        return true;
    }
    struct GPIOs {
        ::futils::binary::flags_t<std::uint32_t, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1> flags_2_;
        bits_flag_alias_method(flags_2_, 0, reserved);
        bits_flag_alias_method(flags_2_, 1, gpio27);
        bits_flag_alias_method(flags_2_, 2, gpio26);
        bits_flag_alias_method(flags_2_, 3, gpio25);
        bits_flag_alias_method(flags_2_, 4, gpio24);
        bits_flag_alias_method(flags_2_, 5, gpio23);
        bits_flag_alias_method(flags_2_, 6, gpio22);
        bits_flag_alias_method(flags_2_, 7, gpio21);
        bits_flag_alias_method(flags_2_, 8, gpio20);
        bits_flag_alias_method(flags_2_, 9, gpio19);
        bits_flag_alias_method(flags_2_, 10, gpio18);
        bits_flag_alias_method(flags_2_, 11, gpio17);
        bits_flag_alias_method(flags_2_, 12, gpio16);
        bits_flag_alias_method(flags_2_, 13, gpio15);
        bits_flag_alias_method(flags_2_, 14, gpio14);
        bits_flag_alias_method(flags_2_, 15, gpio13);
        bits_flag_alias_method(flags_2_, 16, gpio12);
        bits_flag_alias_method(flags_2_, 17, gpio11);
        bits_flag_alias_method(flags_2_, 18, gpio10);
        bits_flag_alias_method(flags_2_, 19, gpio9);
        bits_flag_alias_method(flags_2_, 20, gpio8);
        bits_flag_alias_method(flags_2_, 21, gpio7);
        bits_flag_alias_method(flags_2_, 22, gpio6);
        bits_flag_alias_method(flags_2_, 23, gpio5);
        bits_flag_alias_method(flags_2_, 24, gpio4);
        bits_flag_alias_method(flags_2_, 25, gpio3);
        bits_flag_alias_method(flags_2_, 26, gpio2);
        bits_flag_alias_method(flags_2_, 27, gpio1);
        bits_flag_alias_method(flags_2_, 28, gpio0);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
        template <typename Visitor>
        void visit(Visitor&& v) {
            v(v, "reserved", (*this).reserved());
            v(v, "gpio27", (*this).gpio27());
            v(v, "gpio26", (*this).gpio26());
            v(v, "gpio25", (*this).gpio25());
            v(v, "gpio24", (*this).gpio24());
            v(v, "gpio23", (*this).gpio23());
            v(v, "gpio22", (*this).gpio22());
            v(v, "gpio21", (*this).gpio21());
            v(v, "gpio20", (*this).gpio20());
            v(v, "gpio19", (*this).gpio19());
            v(v, "gpio18", (*this).gpio18());
            v(v, "gpio17", (*this).gpio17());
            v(v, "gpio16", (*this).gpio16());
            v(v, "gpio15", (*this).gpio15());
            v(v, "gpio14", (*this).gpio14());
            v(v, "gpio13", (*this).gpio13());
            v(v, "gpio12", (*this).gpio12());
            v(v, "gpio11", (*this).gpio11());
            v(v, "gpio10", (*this).gpio10());
            v(v, "gpio9", (*this).gpio9());
            v(v, "gpio8", (*this).gpio8());
            v(v, "gpio7", (*this).gpio7());
            v(v, "gpio6", (*this).gpio6());
            v(v, "gpio5", (*this).gpio5());
            v(v, "gpio4", (*this).gpio4());
            v(v, "gpio3", (*this).gpio3());
            v(v, "gpio2", (*this).gpio2());
            v(v, "gpio1", (*this).gpio1());
            v(v, "gpio0", (*this).gpio0());
        }
    };
    inline bool GPIOs::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_2_.as_value(), false)) {
            return false;
        }
        return true;
    }
    inline bool GPIOs::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_2_.as_value(), false)) {
            return false;
        }
        return true;
    }
    struct VoltageSelect {
        ::futils::binary::flags_t<std::uint32_t, 31, 1> flags_3_;
        bits_flag_alias_method(flags_3_, 0, reserved);
        bits_flag_alias_method(flags_3_, 1, voltage_select);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
        template <typename Visitor>
        void visit(Visitor&& v) {
            v(v, "reserved", (*this).reserved());
            v(v, "voltage_select", (*this).voltage_select());
        }
    };
    inline bool VoltageSelect::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_3_.as_value(), false)) {
            return false;
        }
        return true;
    }
    inline bool VoltageSelect::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_3_.as_value(), false)) {
            return false;
        }
        return true;
    }
    struct GPIORegister {
        ::futils::binary::flags_t<std::uint32_t, 24, 1, 1, 2, 1, 1, 1, 1> flags_4_;
        bits_flag_alias_method(flags_4_, 0, reserved);
        bits_flag_alias_method(flags_4_, 1, output_disabled);
        bits_flag_alias_method(flags_4_, 2, input_enabled);
        bits_flag_alias_method(flags_4_, 3, drive_strength);
        bits_flag_alias_method(flags_4_, 4, pull_up_enabled);
        bits_flag_alias_method(flags_4_, 5, pull_down_enabled);
        bits_flag_alias_method(flags_4_, 6, schmitt_trigger_enabled);
        bits_flag_alias_method(flags_4_, 7, slew_rate_fast);
        bool encode(::futils::binary::writer& w) const;
        bool decode(::futils::binary::reader& r);
        static constexpr size_t fixed_header_size = 4;
        template <typename Visitor>
        void visit(Visitor&& v) {
            v(v, "reserved", (*this).reserved());
            v(v, "output_disabled", (*this).output_disabled());
            v(v, "input_enabled", (*this).input_enabled());
            v(v, "drive_strength", (*this).drive_strength());
            v(v, "pull_up_enabled", (*this).pull_up_enabled());
            v(v, "pull_down_enabled", (*this).pull_down_enabled());
            v(v, "schmitt_trigger_enabled", (*this).schmitt_trigger_enabled());
            v(v, "slew_rate_fast", (*this).slew_rate_fast());
        }
    };
    inline bool GPIORegister::encode(::futils::binary::writer& w) const {
        if (!::futils::binary::write_num(w, flags_4_.as_value(), false)) {
            return false;
        }
        return true;
    }
    inline bool GPIORegister::decode(::futils::binary::reader& r) {
        if (!::futils::binary::read_num(r, flags_4_.as_value(), false)) {
            return false;
        }
        return true;
    }
}  // namespace futils::low::rpi::rp1
