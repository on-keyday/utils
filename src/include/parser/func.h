/*
    utils - utility library
    Copyright (c) 2021-2022 on-keyday (https://github.com/on-keyday)
    Released under the MIT license
    https://opensource.org/licenses/mit-license.php
*/

// Code generated by ifacegen (https://github.com/on-keyday/utils)

#pragma once
#include "../helper/deref.h"
#include <functional>
#include "parser_base.h"

namespace utils {
    namespace parser {
        template <typename Input, typename String, typename Kind, template <typename...> typename Vec>
        struct Func {
           private:
            struct interface__ {
                virtual bool operator()(Sequencer<Input>& seq, wrap::shared_ptr<Token<String, Kind, Vec>>& tok, int flag, Pos& pos) = 0;

                virtual ~interface__() {}
            };

            template <class T__>
            struct implements__ : interface__ {
                T__ t_holder_;

                template <class V__>
                implements__(V__&& args)
                    : t_holder_(std::forward<V__>(args)) {}

                bool operator()(Sequencer<Input>& seq, wrap::shared_ptr<Token<String, Kind, Vec>>& tok, int flag, Pos& pos) override {
                    auto t_ptr_ = utils::helper::deref(this->t_holder_);
                    if (!t_ptr_) {
                        throw std::bad_function_call();
                    }
                    return (*t_ptr_)(seq, tok, flag, pos);
                }
            };

            interface__* iface = nullptr;

           public:
            constexpr Func() {}

            constexpr Func(std::nullptr_t) {}

            template <class T__>
            Func(T__&& t) {
                if (!utils::helper::deref(t)) {
                    return;
                }
                iface = new implements__<std::decay_t<T__>>(std::forward<T__>(t));
            }

            Func(Func&& in) {
                iface = in.iface;
                in.iface = nullptr;
            }

            Func& operator=(Func&& in) {
                delete iface;
                iface = in.iface;
                in.iface = nullptr;
                return *this;
            }

            explicit operator bool() const {
                return iface != nullptr;
            }

            ~Func() {
                delete iface;
            }

            bool operator()(Sequencer<Input>& seq, wrap::shared_ptr<Token<String, Kind, Vec>>& tok, int flag, Pos& pos) {
                return iface ? iface->operator()(seq, tok, flag, pos) : throw std::bad_function_call();
            }
        };

    }  // namespace parser
}  // namespace utils
